/**
 * Copyright 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext.versions = [
        'android'          : [
            "buildTools": "29.0.3",
            "compileSdk": 29,
            "minSdk"    : 15,
            "targetSdk" : 29
        ],
        'androidMapsUtils' : '1.1.0',
        'androidx'         : [
            'appcompat': '1.1.0',
            'coreKtx'  : '1.2.0',
            'espresso' : '3.2.0',
            'test'     : '1.2.0',
            'junit'    : '1.1.1',
        ],
        'junit'            : '4.12',
        'kotlin'           : '1.3.70',
        'kotlinxCoroutines': '1.3.2',
        'mockito'          : '3.0.0',
        'mockitoKotlin'    : '2.2.0',
        'playServices'     : '17.0.0',
    ]

    ext.deps = [
        'androidMapsUtils' : "com.google.maps.android:android-maps-utils:$versions.androidMapsUtils",
        'androidx'         : [
            'appcompat': "androidx.appcompat:appcompat:$versions.androidx.appcompat",
            'coreKtx'  : "androidx.core:core-ktx:$versions.androidx.coreKtx",
            'espresso' : "androidx.test.espresso:espresso-core:$versions.androidx.espresso",
            'test'     : "androidx.test:core:$versions.androidx.test",
            'junit'    : "androidx.test.ext:junit:$versions.androidx.junit"
        ],
        'junit'            : "junit:junit:$versions.junit",
        'kotlin'           : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin",
        'kotlinxCoroutines': "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.kotlinxCoroutines",
        'mockito'          : "org.mockito:mockito-core:$versions.mockito",
        'mockitoKotlin'    : "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockitoKotlin",
        'playServices'     : [
            'basement' : "com.google.android.gms:play-services-basement:$versions.playServices",
            'base' : "com.google.android.gms:play-services-base:$versions.playServices",
            'gcm' : "com.google.android.gms:play-services-gcm:$versions.playServices",
            'location' : "com.google.android.gms:play-services-location:$versions.playServices",
            'maps' : "com.google.android.gms:play-services-maps:$versions.playServices",
        ],
    ]

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.1'
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.4'
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.10.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
    }
}

ext.artifactId = { project, variant ->
    if (project.name == 'maps-utils-ktx') {
        return project.name
    } else if (project.name == 'maps-ktx') {
        return (variant.flavorName == 'standalone') ? "$project.name-v3" : project.name
    } else {
        return null
    }
}

ext.isProjectLibrary = { project ->
    return project.name == 'maps-utils-ktx' || project.name == 'maps-ktx'
}

/**
 * Shared configs across subprojects
 */
allprojects {
    group = 'com.google.maps.android'
    version = '1.4.0'
    project.ext.isLibrary = rootProject.ext.isProjectLibrary(project)

    repositories {
        google()
        jcenter()
        flatDir {
            dirs 'libs'
        }
    }
}

/**
 * Publishing and signing info
 */
subprojects { project ->
    if (!project.ext.isLibrary) return

    apply plugin: 'com.android.library'
    apply plugin: 'jacoco-android'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'signing'

    // Documentation
    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/documentation"
        configuration {
            includeNonPublic = false
            skipEmptyPackages = true
            skipDeprecated = true
            reportUndocumented = true
            jdkVersion = 8
        }
    }

    // Code coverage
    jacoco {
        toolVersion = "0.8.4"
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.source
        archiveClassifier = "sources"
    }

    task dokkaJar(type: Jar, dependsOn: dokka) {
        from dokka.outputDirectory
        archiveClassifier = "javadoc"
    }

    android.libraryVariants.all { variant ->
        if (variant.buildType.name == 'debug') return
        // Publishing
        publishing {
            publications {
                def aarSuffix = (variant.flavorName == "") ? "-release" : "-$variant.flavorName-release"
                def libId = rootProject.ext.artifactId(project, variant)
                println("The artifact ID is $libId")
                "${project.name + variant.flavorName}Aar"(MavenPublication) {
                    groupId project.group
                    artifactId libId
                    version project.version

                    pom {
                        name = project.name
                        description = "Kotlin extensions (KTX) for Google Maps SDK"
                        url = "https://github.com/googlemaps/android-maps-ktx"
                        scm {
                            connection = 'scm:git@github.com:googlemaps/android-maps-ktx.git'
                            developerConnection = 'scm:git@github.com:googlemaps/android-maps-ktx.git'
                            url = 'https://github.com/googlemaps/android-maps-ktx'
                        }

                        licenses {
                            license {
                                name = 'The Apache Software License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution = 'repo'
                            }
                        }

                        organization {
                            name = 'Google Inc'
                            url = 'http://developers.google.com/maps'
                        }

                        developers {
                            developer {
                                name = 'Google Inc.'
                            }
                        }
                    }

                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        project.configurations.api.allDependencies.each { dependency ->
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dependency.group)
                            dependencyNode.appendNode('artifactId', dependency.name)
                            dependencyNode.appendNode('version', dependency.version)
                        }
                    }

                    afterEvaluate {
                        artifact "$buildDir/outputs/aar/${project.name + aarSuffix}.aar"
                        artifact dokkaJar
                        artifact sourcesJar
                    }
                }
            }

            repositories {
                maven {
                    name = "mavencentral"
                    url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials {
                        username sonatypeUsername
                        password sonatypePassword
                    }
                }
            }
        }

        signing {
            sign publishing.publications."${project.name + variant.flavorName}Aar"
        }
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}
