$dokka.format:html
$dokka.linkExtension:html
$dokka.location:com.google.maps.android.ktx.utils$area#com.google.android.gms.maps.model.Polygoncom.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-polygon/area.html
$dokka.location:com.google.maps.android.ktx.utils$computeSphericalOffsetOrigin(com.google.android.gms.maps.model.LatLng, kotlin.Double, kotlin.Double)com.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-lat-lng/compute-spherical-offset-origin.html
$dokka.location:com.google.maps.android.ktx.utils$contains(com.google.android.gms.maps.model.Polygon, com.google.android.gms.maps.model.LatLng)com.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-polygon/contains.html
$dokka.location:com.google.maps.android.ktx.utils$contains(com.google.android.gms.maps.model.Polyline, com.google.android.gms.maps.model.LatLng, kotlin.Double)com.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-polyline/contains.html
$dokka.location:com.google.maps.android.ktx.utils$containsLocation(kotlin.collections.List((com.google.android.gms.maps.model.LatLng)), com.google.android.gms.maps.model.LatLng, kotlin.Boolean)com.google.maps.android.ktx.utils/kotlin.collections.-list/contains-location.html
$dokka.location:com.google.maps.android.ktx.utils$isClosedPolygon(kotlin.collections.List((com.google.android.gms.maps.model.LatLng)))com.google.maps.android.ktx.utils/kotlin.collections.-list/is-closed-polygon.html
$dokka.location:com.google.maps.android.ktx.utils$isLocationOnPath(kotlin.collections.List((com.google.android.gms.maps.model.LatLng)), com.google.android.gms.maps.model.LatLng, kotlin.Boolean, kotlin.Double)com.google.maps.android.ktx.utils/kotlin.collections.-list/is-location-on-path.html
$dokka.location:com.google.maps.android.ktx.utils$isOnEdge(com.google.android.gms.maps.model.Polygon, com.google.android.gms.maps.model.LatLng, kotlin.Double)com.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-polygon/is-on-edge.html
$dokka.location:com.google.maps.android.ktx.utils$isOnEdge(kotlin.collections.List((com.google.android.gms.maps.model.LatLng)), com.google.android.gms.maps.model.LatLng, kotlin.Boolean, kotlin.Double)com.google.maps.android.ktx.utils/kotlin.collections.-list/is-on-edge.html
$dokka.location:com.google.maps.android.ktx.utils$latLngListEncode(kotlin.collections.List((com.google.android.gms.maps.model.LatLng)))com.google.maps.android.ktx.utils/kotlin.collections.-list/lat-lng-list-encode.html
$dokka.location:com.google.maps.android.ktx.utils$signedArea#com.google.android.gms.maps.model.Polygoncom.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-polygon/signed-area.html
$dokka.location:com.google.maps.android.ktx.utils$simplify(kotlin.collections.List((com.google.android.gms.maps.model.LatLng)), kotlin.Double)com.google.maps.android.ktx.utils/kotlin.collections.-list/simplify.html
$dokka.location:com.google.maps.android.ktx.utils$sphericalDistance(com.google.android.gms.maps.model.LatLng, com.google.android.gms.maps.model.LatLng)com.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-lat-lng/spherical-distance.html
$dokka.location:com.google.maps.android.ktx.utils$sphericalHeading(com.google.android.gms.maps.model.LatLng, com.google.android.gms.maps.model.LatLng)com.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-lat-lng/spherical-heading.html
$dokka.location:com.google.maps.android.ktx.utils$sphericalPathLength#com.google.android.gms.maps.model.Polylinecom.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-polyline/spherical-path-length.html
$dokka.location:com.google.maps.android.ktx.utils$sphericalPathLength(kotlin.collections.List((com.google.android.gms.maps.model.LatLng)))com.google.maps.android.ktx.utils/kotlin.collections.-list/spherical-path-length.html
$dokka.location:com.google.maps.android.ktx.utils$sphericalPolygonArea(kotlin.collections.List((com.google.android.gms.maps.model.LatLng)))com.google.maps.android.ktx.utils/kotlin.collections.-list/spherical-polygon-area.html
$dokka.location:com.google.maps.android.ktx.utils$sphericalPolygonSignedArea(kotlin.collections.List((com.google.android.gms.maps.model.LatLng)))com.google.maps.android.ktx.utils/kotlin.collections.-list/spherical-polygon-signed-area.html
$dokka.location:com.google.maps.android.ktx.utils$toLatLngList(kotlin.String)com.google.maps.android.ktx.utils/kotlin.-string/to-lat-lng-list.html
$dokka.location:com.google.maps.android.ktx.utils$withSphericalLinearInterpolation(com.google.android.gms.maps.model.LatLng, com.google.android.gms.maps.model.LatLng, kotlin.Double)com.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-lat-lng/with-spherical-linear-interpolation.html
$dokka.location:com.google.maps.android.ktx.utils$withSphericalOffset(com.google.android.gms.maps.model.LatLng, kotlin.Double, kotlin.Double)com.google.maps.android.ktx.utils/com.google.android.gms.maps.model.-lat-lng/with-spherical-offset.html
$dokka.location:com.google.maps.android.ktx.utils.geometry$component1(com.google.maps.android.geometry.Point)com.google.maps.android.ktx.utils.geometry/com.google.maps.android.geometry.-point/component1.html
$dokka.location:com.google.maps.android.ktx.utils.geometry$component2(com.google.maps.android.geometry.Point)com.google.maps.android.ktx.utils.geometry/com.google.maps.android.geometry.-point/component2.html
$dokka.location:com.google.maps.android.ktx.utils.heatmaps$toWeightedLatLng(com.google.android.gms.maps.model.LatLng, kotlin.Double)com.google.maps.android.ktx.utils.heatmaps/com.google.android.gms.maps.model.-lat-lng/to-weighted-lat-lng.html
com.google.maps.android.ktx.utils
com.google.maps.android.ktx.utils.geojson
com.google.maps.android.ktx.utils.geometry
com.google.maps.android.ktx.utils.heatmaps
com.google.maps.android.ktx.utils.kml
